.flex {
  box-sizing: border-box;
  display: flex;
  padding: 0;
  margin: 0;
  &.container {
    flex-direction: column;
    position: relative;
    width: 100%;
    max-width: #{$layout-max-width}px;
    margin: 0 auto;
    &.fluid {
      max-width: 100%;
    }
    &.gutter {
      padding-left: #{$layout-gutter/2}px;
      padding-right: #{$layout-gutter/2}px;
    }
    &.debug {
      background: transparentize($layout-color-debug-container, .8);
      border: dashed 1px transparentize($layout-color-debug-container, .6);
    }
  }
  &:not(.container) {
    // width: 100%;
    flex-grow: 1;
    flex-shrink: 1;
    @mixin media-query($breakpoint) {

      &.#{$breakpoint} {
        flex-grow: 1;
        flex-basis: 0;
        max-width: 100%;
      }

      @each $column in $var-columns-top {
        &.#{$breakpoint}-#{$column} {
          flex-basis: calc((100% * #{$column}) / #{$layout-columns});
          max-width: calc((100% * #{$column}) / #{$layout-columns});
        }
      }

      &.#{$breakpoint}-shift-0 {
        margin-left: 0;
      }

      @each $column in $var-columns-bottom {
        &.#{$breakpoint}-shift-#{$column} {
          margin-left: calc((100% * #{$column}) / #{$layout-columns});
        }
        &.#{$breakpoint}-gutter.#{$breakpoint}-row {
          margin: #{$layout-gutter}px 0;
        }
        &.#{$breakpoint}-gutter.#{$breakpoint}-col {
          padding-left: #{$layout-gutter/2}px;
          padding-right: #{$layout-gutter/2}px;
        }
        &.#{$breakpoint}-reverse.#{$breakpoint}-row {
          flex-direction: row-reverse;
        }
        &.#{$breakpoint}-reverse.#{$breakpoint}-col {
          flex-direction: column-reverse;
        }
      }


      &.#{$breakpoint}-row {
        flex-direction: row;
        flex-wrap: wrap;
        &.debug {
          background: transparentize($layout-color-debug-row, .8);
          border: dashed 1px transparentize($layout-color-debug-row, .6);
        }
      }

      &.#{$breakpoint}-col {
        // flex: 1;
        flex-direction: column;
        // flex: 0 0 auto;

        &.debug {
          background: transparentize($layout-color-debug-column, .8);
          border: dashed 1px transparentize($layout-color-debug-column, .6);
        }
      }

      &.#{$breakpoint}-hidden {
        display: none;
      }

      &:not(.#{$breakpoint}-hidden) {
        display: flex;
      }

      &.#{$breakpoint}-align-stretch {
        align-items: stretch;
      }
      &.#{$breakpoint}-align-start {
        align-items: flex-start;
      }
      &.#{$breakpoint}-align-end {
        align-items: flex-end;
      }
      &.#{$breakpoint}-align-center {
        align-items: center;
      }
      &.#{$breakpoint}-align-baseline {
        align-items: baseline;
      }
      &.#{$breakpoint}-justify-start {
        justify-content: flex-start;
      }
      &.#{$breakpoint}-justify-end {
        justify-content: flex-end;
      }
      &.#{$breakpoint}-justify-center {
        justify-content: center;
      }
      &.#{$breakpoint}-justify-between {
        justify-content: space-between;
      }
      &.#{$breakpoint}-justify-around {
        justify-content: space-around;
      }
      &.#{$breakpoint}-justify-evenly {
        justify-content: space-evenly;
      }
      &.#{$breakpoint}-justify-initial {
        justify-content: initial;
      }
      &.#{$breakpoint}-justify-inherit {
        justify-content: inherit;
      }
      &.#{$breakpoint}-grow {
        flex-grow: 1;
      }
      &.#{$breakpoint}-nowrap {
        flex-wrap: nowrap;
      }
      &.#{$breakpoint}-first {
        order: -1;
      }
      &.#{$breakpoint}-last {
        order: 1;
      }
    }

    @include media-query(xs);

    @each $breakpoint in $var-media-breakpoint-names{
      @media only screen and (min-width: #{map-get($var-breakpoints, $breakpoint)}px) {
        @include media-query($breakpoint);
      }
    }
  }
}
