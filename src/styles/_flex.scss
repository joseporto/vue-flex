.flex {
  box-sizing: border-box;
  padding: 0;
  margin: 0;
  &.container {
    display: flex;
    flex-direction: column;
    position: relative;
    width: 100%;
    max-width: #{$layout-max-width}px;
    margin: 0 auto;
    &.fluid {
      max-width: 100%;
    }
    &.gutter {
      padding-left: #{$layout-gutter/2}px;
      padding-right: #{$layout-gutter/2}px;
    }
    &.debug {
      background: transparentize($layout-color-debug-container, .8);
      border: dashed 1px transparentize($layout-color-debug-container, .6);
    }
  }
  &:not(.container) {
    flex-grow: 1;
    flex-shrink: 1;
    @mixin media-query($breakpoint) {


      @each $column in $var-columns-top {
        &.#{$breakpoint}-#{$column} {
          flex-basis: calc((100% * #{$column}) / #{$layout-columns});
          max-width: calc((100% * #{$column}) / #{$layout-columns});
        }
      }

      &.#{$breakpoint}-sft-0 {
        margin-left: 0;
      }

      @each $column in $var-columns-bottom {
        &.#{$breakpoint}-sft-#{$column} {
          margin-left: calc((100% * #{$column}) / #{$layout-columns});
        }
        &.#{$breakpoint}-rvs.#{$breakpoint}-row {
          flex-direction: row-reverse;
        }
        &.#{$breakpoint}-rvs.#{$breakpoint}-col {
          flex-direction: column-reverse;
        }
      }

      &.#{$breakpoint}-row {
        flex-direction: row;
        flex-wrap: wrap;
        &.debug {
          background: transparentize($layout-color-debug-row, .8);
          border: dashed 1px transparentize($layout-color-debug-row, .6);
        }
      }

      &.#{$breakpoint}-col {
        flex-direction: column;

        &.debug {
          background: transparentize($layout-color-debug-column, .8);
          border: dashed 1px transparentize($layout-color-debug-column, .6);
        }
      }

      @each $break in $var-media-breakpoint-names{
        @if $break != $breakpoint {
          &:not(.#{$break}-hdn) {
            display: flex;
          }
          &:not(.#{$breakpoint}-gtr) {
            padding-left: 0;
            padding-right: 0;
          }
        }
      }

      &.#{$breakpoint}-hdn {
        display: none;
      }
      &.#{$breakpoint}-gtr {
        padding-left: #{$layout-gutter/2}px;
        padding-right: #{$layout-gutter/2}px;
      }

      &.#{$breakpoint}-al-stch {
        align-items: stretch;
      }
      &.#{$breakpoint}-al-top {
        align-items: flex-start;
      }
      &.#{$breakpoint}-al-bot {
        align-items: flex-end;
      }
      &.#{$breakpoint}-al-mid {
        align-items: center;
      }
      &.#{$breakpoint}-al-bse {
        align-items: baseline;
      }
      &.#{$breakpoint}-jf-lft {
        justify-content: flex-start;
      }
      &.#{$breakpoint}-jf-rgt {
        justify-content: flex-end;
      }
      &.#{$breakpoint}-jf-ctr {
        justify-content: center;
      }
      &.#{$breakpoint}-jf-bet {
        justify-content: space-between;
      }
      &.#{$breakpoint}-jf-aro {
        justify-content: space-around;
      }
      &.#{$breakpoint}-jf-evl {
        justify-content: space-evenly;
      }
      &.#{$breakpoint}-jf-ini {
        justify-content: initial;
      }
      &.#{$breakpoint}-jf-inh {
        justify-content: inherit;
      }
      &.#{$breakpoint}-gro {
        flex-grow: 1;
      }
      &.#{$breakpoint}-nwp {
        flex-wrap: nowrap;
      }
      &.#{$breakpoint}-fst {
        order: -1;
      }
      &.#{$breakpoint}-lst {
        order: 1;
      }
    }

    @include media-query(xs);

    @each $breakpoint in $var-media-breakpoint-names{
      @media only screen and (min-width: #{map-get($var-breakpoints, $breakpoint)}px) {
        @include media-query($breakpoint);
      }
    }
  }
}
